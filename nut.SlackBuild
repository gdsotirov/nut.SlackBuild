#!/bin/sh
#
# Slackware build script for Network UPS Tools (NUT)
# Copyright (C) 2006-2009,2014 Georgi D. Sotirov <gdsotirov@dir.bg>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Visit SlackPack at http://sotirov-bg.net/slackpack/
#
# $Id: nut.SlackBuild,v 1.11 2014/02/16 16:28:27 gsotirov Exp $
#

. ../../slack-package.conf

NAME=nut
VERSION=2.6.4
BUILD=${BUILD:-1}

TMP=${TMP:-/tmp}
CWD=${CWD:-`pwd`}
PKG_DIR=${PKG_DIR:-/tmp}

if [ ! -e $TMP ]; then
  mkdir -p $TMP # location to build the source
fi

SRC=$TMP/$NAME-$VERSION
if [ -e $SRC -a -d $SRC ]; then
  echo "Source directory '$SRC' already exists! Plaese, move it or remove it."
  exit 1
fi

PKG=$TMP/package-$NAME
if [ -e $PKG -a -d $PKG ]; then
  echo "Package creation directory '$PKG' already exists! Please, move it or remove it."
  exit 2
fi
mkdir -p $PKG

# Extract the source
cd $TMP
tar -xvf $CWD/$NAME-$VERSION.tar.gz || exit 3
cd $SRC
fix_source

# Configure
CFLAGS=$SLKCFLAGS \
CXXFLAGS=$SLKCFLAGS \
./configure --build=$ARCH-slackware-linux \
            --host=$ARCH-slackware-linux \
            --prefix=/usr \
            --libdir=/usr/lib$LIBDIRSUFFIX \
            --sysconfdir=/etc/ups \
            --localstatedir=/var/ups \
            --datarootdir=/usr/share \
            --mandir=/usr/man \
            --enable-shared=yes \
            --enable-static=no \
            --enable-strip \
            --with-all \
            --with-ssl \
            --with-user=nut \
            --with-group=nut \
            --with-cgipath=/var/www/$NAME-cgi-bin \
            --with-htmlpath=/var/www/$NAME \
            --with-statepath=/var/state/ups || exit 4

# Build & install
make -j4 || exit 5
make DESTDIR=$PKG install || exit 6

# Manually create state dir
install -m 700 -d $PKG/var/state/ups

# Install bash completion
install -m 755 -d $PKG/etc/bash_completion.d
install -m 644 $SRC/scripts/misc/nut.bash_completion \
               $PKG/etc/bash_completion.d/nut.bash_completion

# Prepare the package
bin_perms $PKG
sbin_perms $PKG
( cd $PKG; strip_bin; strip_lib )
gzip_man $PKG
create_docs $PKG $NAME-$VERSION

install -m 755 -d $PKG/install
install -m 644 $CWD/slack-desc     $PKG/install/slack-desc
install -m 644 $CWD/slack-required $PKG/install/slack-required
install -m 644 $CWD/slack-suggests $PKG/install/slack-suggests

install -m 755 -d $PKG/usr/src/slackbuilds/$NAME-$VERSION
install -m 644 $CWD/slack-desc       $PKG/usr/src/slackbuilds/$NAME-$VERSION/slack-desc
install -m 644 $CWD/slack-required   $PKG/usr/src/slackbuilds/$NAME-$VERSION/slack-required
install -m 644 $CWD/slack-suggests   $PKG/usr/src/slackbuilds/$NAME-$VERSION/slack-suggests
install -m 644 $CWD/$NAME.SlackBuild $PKG/usr/src/slackbuilds/$NAME-$VERSION/$NAME.SlackBuild

# Assemble the package in the package dir
cd $PKG
PKG_NAME=$NAME-$VERSION-$ARCH-$BUILD$MYIN
makepkg -l y -c n ../$PKG_NAME.txz
cd $TMP
md5sum $PKG_NAME.txz > $PKG_NAME.txz.md5
cat $PKG/install/slack-desc > $PKG_NAME.txt
mv $PKG_NAME* $PKG_DIR

# Clean Up
if [ "$1" == "--cleanup" ]; then
  rm -r $SRC
  rm -r $PKG
fi

